generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://johndoe:password123@localhost:5432/choir_project?schema=public"
  }

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  isActive    Boolean  @default(false)  // User must activate account
  activationToken String? // Token for email activation
  createdAt   DateTime @default(now())

 // Required for NextAuth
  accounts    Account[]
  sessions    Session[]

  // Relations
  teams       UserTeam[]  // ✅ A user can be in multiple teams
  roles       UserRole[]  // ✅ A user can have multiple roles
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String  @unique
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id          String   @id @default(uuid())
  sessionToken String  @unique
  userId      String
  expires     DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(uuid()) 
  name        String
  description String?
  created_at  DateTime @default(now())

  // Relations
  users       UserTeam[]  // ✅ Many-to-Many with Users
}

model UserTeam {
  id      String @id @default(uuid())
  userId  String
  teamId  String

  user    User @relation(fields: [userId], references: [id])
  team    Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])  // ✅ Prevent duplicate team assignments
}

model Role {
  id   String @id @default(uuid())
  name String @unique  // ✅ Admins can create new roles

  // Relations
  users UserRole[]  // ✅ Many-to-Many with Users
  createdAt   DateTime @default(now())
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])  // ✅ Prevent duplicate roles for a user
}

model Song {
  id       String   @id @default(uuid()) 
  title    String
  artist   String
  link     String?  // ✅ YouTube link
  mp3_url  String?  // ✅ Downloadable MP3 link
  created_at DateTime @default(now())
}

model Member {
  id        String   @id @default(uuid())
  name      String
  role      String
  createdAt DateTime @default(now())
}

