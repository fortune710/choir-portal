generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phone_number String
  password    String? //User record can be created by admin, but user can only register is record is available
  avatar      String?
  created_at  DateTime @default(now())

  isActive    Boolean  @default(false)  // User must activate account
  activationToken String? // Token for email activation
  vocalCategory  String?
  birthday DateTime?

 // Required for NextAuth
  accounts    Account[]
  sessions    Session[]

  // Relations
  eventTeam   EventTeam[]
  coordinatedTeams Team[]
  eventsLed   Events[]
  teams       UserTeam[]  // ✅ A user can be in multiple teams
  roles       UserRole[]  // ✅ A user can have multiple roles

  // New relation for event members
  eventParticipations EventMember[]
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String  @unique
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id          String   @id @default(uuid())
  sessionToken String  @unique
  userId      String
  expires     DateTime
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(uuid()) 
  name        String
  description String?
  created_at  DateTime @default(now())
  coordinator_user_id String?

  // Relations
  coordinator  User? @relation(fields: [coordinator_user_id], references: [id])
  users       UserTeam[]  // ✅ Many-to-Many with Users
  events      EventTeam[] //Many-to-Many with Events
}

model UserTeam {
  id      String @id @default(uuid())
  userId  String
  teamId  String

  user    User @relation(fields: [userId], references: [id])
  team    Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])  // ✅ Prevent duplicate team assignments
}

model Role {
  id          String   @id @default(uuid())
  name        String   
  createdAt   DateTime @default(now())

  // Relations
  users       UserRole[]        
  permissions RolePermission[]  // Relation to track assigned permissions
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  roleId String

  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])  // ✅ Prevent duplicate roles for a user
}

model RolePermission {
  id           String   @id @default(uuid())
  roleId       String
  permissionId String   // This will store the hardcoded permission ID (e.g., "members.view")
  createdAt    DateTime @default(now())

  // Relations
  role         Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])  // Prevent duplicate permissions for a role
}

model Song {
  id       String   @id @default(uuid()) 
  title    String
  artist   String
  link     String?  // ✅ YouTube link
  mp3_url  String?  // ✅ Downloadable MP3 link
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  key String?
  lyrics String? @db.Text

  event EventSong[]
}

model Member {
  id        String   @id @default(uuid())
  name      String
  role      String
  createdAt DateTime @default(now())
}

model Events {
  id        String   @id @default(uuid())
  name      String
  description String

  type      EventType
  date      DateTime
  startTime      DateTime
  endTime       DateTime
  createdAt DateTime @default(now())

  meetingUrl String?

  prayerPoints String? @db.Text

  dressCode String?
  guestLead String?
  eventLeadUserId String?

  isRecurring Boolean @default(false)
  recurrenceRule String? // e.g., "WEEKLY", "MONTHLY"
  recurrenceEndDate DateTime?
  parentEventId String? // To track which event this was created from
  parent Events? @relation("RecurringEvents", fields: [parentEventId], references: [id])
  childEvents Events[] @relation("RecurringEvents")

  eventLead User? @relation(fields: [eventLeadUserId], references: [id])
  teams     EventTeam[]
  songs     EventSong[]

  // New relation for members
  members   EventMember[]
}

model EventTeam {
  id        String   @id @default(uuid())
  teamId    String
  eventId   String
  coordinatorUserId String?

  coordinator User? @relation(fields: [coordinatorUserId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  event     Events   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([eventId, teamId])
}

model EventSong {
  id  String @id @default(uuid())
  eventId String
  songId String

  song  Song @relation(fields: [songId], references: [id])
  event     Events   @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

   @@unique([eventId, songId])
}

// New model for event members
model EventMember {
  id        String   @id @default(uuid())
  eventId   String
  memberId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event     Events   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  member    User     @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([eventId, memberId]) // Prevent duplicate assignments
}

enum EventType {
  REHEARSAL
  SERVICE
  AUXILIARY
  PRAYER
  WORKSHOP
}